change <- 0
wdays <- weekdays(today())
if (wdays =="日曜日") {
change <- 0
} else if (wdays =="月曜日") {
change <- 1
} else if (wdays =="火曜日") {
change <- 2
} else if (wdays =="水曜日") {
change <- 3
} else if (wdays =="木曜日") {
change <- 4
} else if (wdays =="金曜日") {
change <- 5
} else if (wdays =="土曜日") {
change <- 6
}
timespan <- 34 #5週間前まで
time_period_end   <- as.character(as.Date(as.Date(Sys.time())-change)) #集計終了日になるように調整する必要あり
time_period_start <- as.character(as.Date(as.Date(time_period_end)-timespan))
change
time_period_end   <- as.character(as.Date(as.Date(Sys.time())-change)) #集計終了日になるように調整する必要あり
# 曜日調整 --------------------------------------------------------------------
#曜日に応じて週番号割り振りを変える
change <- 0
time_period_end   <- as.character(as.Date(as.Date(Sys.time())-change)) #集計終了日になるように調整する必要あり
change <- 0
wdays <- weekdays(today())
if (wdays =="日曜日") {
change <- -1
} else if (wdays =="月曜日") {
change <- 0
} else if (wdays =="火曜日") {
change <- 1
} else if (wdays =="水曜日") {
change <- 2
} else if (wdays =="木曜日") {
change <- 3
} else if (wdays =="金曜日") {
change <- 4
} else if (wdays =="土曜日") {
change <- 5
}
authorize()
# 曜日調整 --------------------------------------------------------------------
#曜日に応じて週番号割り振りを変える
change <- 0
wdays <- weekdays(today())
if (wdays =="日曜日") {
change <- -1
} else if (wdays =="月曜日") {
change <- 0
} else if (wdays =="火曜日") {
change <- 1
} else if (wdays =="水曜日") {
change <- 2
} else if (wdays =="木曜日") {
change <- 3
} else if (wdays =="金曜日") {
change <- 4
} else if (wdays =="土曜日") {
change <- 5
}
knitr::opts_chunk$set(echo = TRUE)
load(file="weekly_monitoring_ltc_2018-02-08.RData")
View(kw_delta2_filtered)
library(magrittr)
library(knitr)
library(kableExtra)
library(DT)
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(colspan = 3, 'career.levtech.jp'),
th(colspan = 6, 'click'),
th(colspan = 5, 'position')
),
tr(
th("page_category"),
th("url"),
th("query"),
th(week_number_list$days.y[1]),
th(week_number_list$days.y[2]),
th(week_number_list$days.y[3]),
th(week_number_list$days.y[4]),
th(week_number_list$days.y[5]),
th("change"),
th(week_number_list$days.y[1]),
th(week_number_list$days.y[2]),
th(week_number_list$days.y[3]),
th(week_number_list$days.y[4]),
th(week_number_list$days.y[5])
)
)
))
kw_delta2_filtered %>% datatable(class = "cell-border stripe", filter = "top", options = list(autoWidth=TRUE), container = sketch, rownames = FALSE)
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(colspan = 3, 'career.levtech.jp'),
th(colspan = 6, 'click'),
th(colspan = 5, 'position')
),
tr(
th("page_category"),
th("url"),
th("query"),
th(week_number_list$days.y[1]),
th(week_number_list$days.y[2]),
th(week_number_list$days.y[3]),
th(week_number_list$days.y[4]),
th(week_number_list$days.y[5]),
th("change"),
th(week_number_list$days.y[1]),
th(week_number_list$days.y[2]),
th(week_number_list$days.y[3]),
th(week_number_list$days.y[4]),
th(week_number_list$days.y[5])
)
)
))
kw_delta2_filtered %>% datatable(class = "cell-border stripe", filter = "top", options = list(autoWidth=TRUE), container = sketch, rownames = FALSE)
#setwd("C:/datamining/")
#setwd("/Users/ikumi/Dropbox/R_script/analytics") #mac
setwd("C:/Users/kuze/Dropbox/R_script/analytics") #windows
library(RGA)
library(stringi)
library(dplyr)
library(googlesheets)
library("dplyr")
library("stringi")
library("lubridate")
library("chron")
library("searchConsoleR")
library("googleAuthR")
a <- 0
b <- 1
timespan <- 34 #5週間前まで
time_period_end   <- as.character(as.Date(as.Date(Sys.time())-2)) #as.character(as.Date(as.Date(Sys.time())-4))
time_period_start <- as.character(as.Date(as.Date(time_period_end)-timespan))
timespan <- 34 #5週間前まで
time_period_end   <- as.character(as.Date(as.Date(Sys.time())-4)) #as.character(as.Date(as.Date(Sys.time())-4))
time_period_start <- as.character(as.Date(as.Date(time_period_end)-timespan))
timespan <- 34 #5週間前まで
time_period_end   <- as.character(as.Date(as.Date(Sys.time())-3)) #as.character(as.Date(as.Date(Sys.time())-4))
time_period_start <- as.character(as.Date(as.Date(time_period_end)-timespan))
start <- format(as.Date(time_period_start), format="%m/%d/%y")
end   <- format(as.Date(time_period_end), format="%m/%d/%y")
youbi <- weekdays(start)
authorize()
prof <-list_profiles()
#週データ作成
#曜日に応じて週番号割り振りを変える
if (youbi =="Sun") {
change <- 0
} else if (youbi =="Mon") {
change <- 6
} else if (youbi =="Tue") {
change <- 5
} else if (youbi =="Wed") {
change <- 4
} else if (youbi =="Thu") {
change <- 3
} else if (youbi =="Fri") {
change <- 2
} else if (youbi =="Sat") {
change <- 1
}
week_number <- data.frame(seq.dates(start, end, by = "days"))
colnames(week_number) <- "days"
week_number <- week_number %>% mutate(week_number=week(days+change)) #Tuesday cal
week_number$week_number <- paste(year(week_number$days), week_number$week_number, sep = "-")
week_number$days <- as.character(week_number$days)
change <- 0
if (youbi =="Sun") {
change <- 0
} else if (youbi =="Mon") {
change <- 6
} else if (youbi =="Tue") {
change <- 5
} else if (youbi =="Wed") {
change <- 4
} else if (youbi =="Thu") {
change <- 3
} else if (youbi =="Fri") {
change <- 2
} else if (youbi =="Sat") {
change <- 1
}
today()
youbi <- weekdays(today())
library("RGA")
library("stringi")
library("dplyr")
library("lubridate")
library("chron")
library("searchConsoleR")
library("googleAuthR")
# 曜日調整 --------------------------------------------------------------------
#曜日に応じて週番号割り振りを変える
change <- 0
wdays <- weekdays(today())
if (wdays =="日曜日") {
change <- -1
} else if (wdays =="月曜日") {
change <- 0
} else if (wdays =="火曜日") {
change <- 1
} else if (wdays =="水曜日") {
change <- 2
} else if (wdays =="木曜日") {
change <- 3
} else if (wdays =="金曜日") {
change <- 4
} else if (wdays =="土曜日") {
change <- 5
}
# 集計期間の設定 -----------------------------------------------------------------
#自動取得 (毎週水曜集計を想定)
timespan <- 34 #5週間前まで
time_period_end   <- as.character(as.Date(as.Date(Sys.time())-change)) #集計終了日になるように調整する必要あり
time_period_start <- as.character(as.Date(as.Date(time_period_end)-timespan))
# GAでのデータ取得 ---------------------------------------------------------------
authorize()
prof <-list_profiles()
dat <- get_ga(profileId = 74423445, #LTC:74423445 #LTCR:88214568
start.date = time_period_start,
end.date = time_period_end,
dimensions = "ga:landingPagePath,ga:date",#ga:nextPagePath", #ga:exitPagePath
segment = "gaid::-5", #sessions::condition::ga:goal6Completions>=1 #NRの場合は-7
sort = "-ga:sessions",
metrics = "ga:sessions", #ga:sessions
fetch.by = "day") #day
start <- format(as.Date(time_period_start), format="%m/%d/%y")
end   <- format(as.Date(time_period_end), format="%m/%d/%y")
###週番号作成
week_number <- data.frame(seq.dates(start, end, by = "days"))
colnames(week_number) <- "days"
number <- data.frame(number=rep(1, 7))
number <- rbind(number,
data.frame(number=rep(2, 7)),
data.frame(number=rep(3, 7)),
data.frame(number=rep(4, 7)),
data.frame(number=rep(5, 7)))
week_number <- cbind(week_number, number)
index <- data.frame(index=0, stringsAsFactors = FALSE)
index_number <- data.frame(index=number$number[1:(length(number$number)-1)])
index <- rbind(index, index_number)
week_number <- cbind(week_number, index)
week_number <- week_number %>%
mutate(week_index=ifelse(number==index,0,number))
week_number_list <- week_number %>%
filter(week_index!=0) %>%
select(week_index, days)
week_number <- week_number %>%
left_join(week_number_list, by=c("number"="week_index"))
week_number$days.y <- as.Date(week_number$days.y, format="%yyyy-%mm-%dd")
week_number$days.x <- as.character(week_number$days.x)
#週ごとに集計
#datに週番号を紐付ける
days <- format(as.Date(dat$date)+1, format="%m/%d/%y")
dat <- cbind(days,dat)
dat$days <- as.character(dat$days)
dat <- dat %>% left_join(week_number[,c("days.x", "days.y")],by=c("days"="days.x"))
#集計用に週番号リストの表記を揃える
week_number_list <- week_number_list %>%
mutate(days.y=as.Date(days, format = "%yyyy-%mm-%dd"))
#週ごとにページ別訪問数を集計
dat <- dat %>%
group_by(landingPagePath, days.y) %>%
summarise(sessions=sum(sessions))
#sessionを週ごとに集計するためのURLリストを作成
landingPagePath <- data.frame(unique(dat$landingPagePath))
landingPagePath$unique.dat.landingPagePath. <- as.character(landingPagePath$unique.dat.landingPagePath.)
colnames(landingPagePath) <- "landingPagePath"
pb <- txtProgressBar(min = 1, max = nrow(week_number_list), style = 3)
for (i in 1:nrow(week_number_list))  {
test <- filter(dat, days.y==week_number_list$days.y[i])
test <- data.frame(test$landingPagePath, test$sessions)
colnames(test) <- c("landingPagePath", "sessions")
test$landingPagePath <- as.character(test$landingPagePath)
landingPagePath <- dplyr::left_join(landingPagePath, test, by="landingPagePath")
setTxtProgressBar(pb, i)
}
col <- c("landingPagePath", as.character(week_number_list$days.y))
colnames(landingPagePath) <- col
# ページカテゴリデータごとに集計 ---------------------------------------------------------
#カテゴリデータの読込
category_mat <- read.csv("input/category_list_ltc.csv") #shift-jis
res <- matrix(0,nrow(landingPagePath),1) #カテゴリ名を入れるための空箱を用意
colnames(res) <- "category_name"
#カテゴリ名の照合
#注:csvファイルの正規表現で指定していないページ(lpなど)はNAになる
catlist <- as.character(category_mat[,2])
pb <- txtProgressBar(min = 1, max = nrow(res), style = 3)
for(i in 1:nrow(res)){
res[i,1] <- as.character(category_mat[min(which((stri_detect_regex(landingPagePath[i,1],catlist)==TRUE))),1])
setTxtProgressBar(pb, i)
}
landingPagePath <- cbind(res, landingPagePath)
landingPagePath[is.na(landingPagePath)] <- 0
landingPagePath <- landingPagePath %>% arrange(category_name)
#カテゴリ別の訪問数週次変動
category_summary <- landingPagePath %>%
group_by(category_name) %>%
summarise_at(vars(dplyr::starts_with("20")), funs(sum)) #`summarise_each()` is deprecated.
# 前週との差分を計算 ---------------------------------------------------------------
a <- 0 #最終週
b <- 1 #最終週のn週間前を指定できる
#ページカテゴリ別
category_summary <- data.frame(category_summary)
category_summary <- category_summary %>%
mutate(delta=(category_summary[,ncol(category_summary)-a] #最終週
-category_summary[,ncol(category_summary)-b])) #前の週
#ページ単位の週次訪問数変動
GA_data <- data.frame(landingPagePath) #landingPagePathは変数名と列名が被っていて名前空間が整理できないので変える
GA_data <- GA_data %>% mutate(delta=(GA_data[,ncol(GA_data)-a] -GA_data[,ncol(GA_data)-b])) #書き換え 差分を出したい週番号を記入
category_set <- data.frame(unique(GA_data$category_name)) #フィルタ用のカテゴリリスト作成(category_matだとlevelsの数が異なるためエラーになってしまう)
colnames(category_set) <- "category_name"
category_set <- category_set[!is.na(category_set$category_name),]
#変動の大きい順に並び替える
pb <- txtProgressBar(min = 1, max = length(category_set), style = 3)
for (i in 1:length(category_set)) {
GA_data_arranged <- GA_data %>%
filter(category_name==category_set[i])
if(nrow(GA_data_arranged)==0) { #訪問数0のカテゴリがあった場合はループ先頭に戻る
next
}
#変動の合計値が負なら昇順、正なら降順
if(sum(GA_data_arranged["delta"])<0) {
GA_data_arranged <- GA_data_arranged %>% arrange(delta)
}
else {
GA_data_arranged <- GA_data_arranged %>% arrange(desc(delta))
}
#データ結合
if (i==1) {
GA_data_arranged_result <- GA_data_arranged
}
else {
GA_data_arranged_result <- rbind(GA_data_arranged_result, GA_data_arranged)
}
setTxtProgressBar(pb, i)
}
GA_data_arranged_result <- data.frame(GA_data_arranged_result) #データフレームに直さないと後でcbindできない
#トップ5を抽出する準備
#カテゴリごとに上から番号をふる
res <- data.frame(matrix(1,nrow(GA_data_arranged_result),1))
colnames(res) <- "top_page_filter"
n <- nrow(GA_data_arranged_result)
pb <- txtProgressBar(min = 1, max = n, style = 3)
for (i in 2:n) {
if(GA_data_arranged_result$category_name[i]==GA_data_arranged_result$category_name[i-1]) {
res[i,1] <- res[i-1,1] + 1
}
setTxtProgressBar(pb, i)
}
GA_data_arranged_result <- cbind(GA_data_arranged_result, res)
#カテゴリ別且つページ別の週次変動トップ5を抽出
GA_data_arranged_result_filtered <- GA_data_arranged_result %>% filter(top_page_filter<=5)
#変動が0のページを除外
GA_data_arranged_result_filtered <- GA_data_arranged_result_filtered[GA_data_arranged_result_filtered$delta!=0,]
#filterを除去
GA_data_arranged_result_filtered <- GA_data_arranged_result_filtered[,-ncol(GA_data_arranged_result_filtered)]
# GSCクエリデータ取得 -------------------------------------------------------------
gar_auth() #new_user = TRUE
sc_websites <- list_websites()
site <- "https://career.levtech.jp"
#外部ファイルを回す
source("ltc_ga_gsc_ranking_monitoring_report_pre.R")
#save.image(file="ga_monitoring_ltcr_ver2.RData")
#load(file="ga_monitoring_ltc_ver2.RData")
#query_database <- 0
# 流入KWの週次クリック数変動 ----------------------------------------------------------
a <- 0 #最終週
b <- 1 #最終週のn週間前を指定できる
#メモ KW_delta2のうち、GA_data_arranged_filteredに出てきたURLに絞る
#メモ 上記を更にページ毎にクリック数変動の大きかったKW上位5位くらいに絞る
#クリック数の差分を出す 今週-前週
click_fluctuation <- data.frame(query_url_click) %>%
mutate(delta=(query_url_click[,ncol(query_url_click)-a]-query_url_click[,ncol(query_url_click)-b]))
category_set <- data.frame(unique(query_url_click$category_name)) #フィルタ用のカテゴリリスト作成(category_matだとlevelsの数が異なるためエラーになってしまう)
colnames(category_set) <- "cat_name"
n <- nrow(category_set)
pb <- txtProgressBar(min = 1, max = n, style = 3)
for (i in 1:nrow(category_mat)) {
kw_delta1 <- click_fluctuation %>% #ページカテゴリごとにクエリ別で集計
filter(category_name==category_set$cat_name[i]) %>%
group_by(category_name, url, query) %>%
summarise_at(vars(matches("^X20|^delta")), funs(sum)) #`summarise_each()` is deprecated.
if(nrow(kw_delta1)==0) { #訪問数0のカテゴリがあった場合はループ先頭の戻る
next
}
#変動の合計値が負なら昇順、正なら降順
if(sum(kw_delta1["delta"])<0) {
kw_delta1 <- kw_delta1 %>% arrange(delta)
}
else {
kw_delta1 <- kw_delta1 %>% arrange(desc(delta))
}
#データ結合
if (i==1) {
kw_delta2 <- kw_delta1
}
else {
kw_delta2 <- rbind(kw_delta2, kw_delta1)
}
setTxtProgressBar(pb, i)
}
kw_delta2 <- data.frame(kw_delta2) #データフレームに直さないと後でcbindできない
# 週次変動の大きいクエリのみ抽出(準備) ---------------------------------------------------------
#kw_delta2のうち、GAで週次訪問変動の大きかったページに絞る
kw_delta2_filtered <- kw_delta2[(kw_delta2$url%in%GA_data_arranged_result_filtered$landingPagePath),]
#ページカテゴリ別に変動の大きいクエリ順でランキングづけ
res <- data.frame(matrix(1,nrow(kw_delta2_filtered),1))
colnames(res) <- "top_kw_filter"
n <- nrow(kw_delta2_filtered)
pb <- txtProgressBar(min = 1, max = n, style = 3)
for (i in 2:n) {
if(kw_delta2_filtered$category_name[i]==kw_delta2_filtered$category_name[i-1]) {
res[i,1] <- res[i-1,1] + 1
}
setTxtProgressBar(pb, i)
}
kw_delta2_filtered <- cbind(kw_delta2_filtered, res)
#integrate
kw_delta2_filtered <- kw_delta2_filtered %>% mutate(id=paste(kw_delta2_filtered$query,kw_delta2_filtered$url,sep="_"))
kw_delta2_filtered <- cbind(kw_delta2_filtered$id,kw_delta2_filtered)
kw_delta2_filtered <- kw_delta2_filtered[,-ncol(kw_delta2_filtered)]
names(kw_delta2_filtered)[1] <- "id"
kw_delta2_filtered$id <- as.character(kw_delta2_filtered$id)
# クリック数と順位を紐付け ------------------------------------------------------------
queryid_and_rank <- query_url_rank %>% mutate(id=paste(query_url_rank$query,query_url_rank$url,sep="_"))
queryid_and_rank <- queryid_and_rank %>%
select(id, starts_with("20")) #idと週次データのみを選
kw_delta2_filtered <- kw_delta2_filtered %>% left_join(queryid_and_rank,by="id")
kw_delta2_filtered <- kw_delta2_filtered %>%
select(-id)
#カテゴリ別>ページ別>KW別の週次変動トップ10を抽出
kw_delta2_filtered10 <- kw_delta2_filtered %>% filter(top_kw_filter<=10)
kw_delta2_filtered10 <- kw_delta2_filtered10[kw_delta2_filtered10$delta!=0,] #変動が0のページを除外
kw_delta2_filtered10 <- kw_delta2_filtered10 %>%
select(-top_kw_filter)
#小数点以下1桁で四捨五入
kw_delta2_filtered10[,c(10:14)] <- round(kw_delta2_filtered10[,c(10:14)],digits = 1)
#作業スペースごと保存
save.image(file="weekly_monitoring_ltc_2018-02-15.RData")
View(GA_data_arranged_result)
View(kw_delta2_filtered)
View(kw_delta2_filtered10)
setwd("/Users/ikumi/Dropbox/R_script/github/causal_inference")
#Matchingパッケージを呼び出す
library(Matching)
#サンプルデータを呼び出す
data(lalonde)
#データの確認
head(lalonde)
#ロジスティック回帰モデルを用いて傾向スコアを推定する。
#re78(78年実質賃金)に対する効果を調べたいので、説明変数から除外しておく。
#treatはCMなどを見せたかどうかのバイナリーデータ。
logi <- glm(treat~., data=lalonde[, -9], family = binomial)
#因果効果を計算するために、マッチングを推定する。
#今回の効果を見るためのre78をYに指定して、CMなどを見せたかどうかのtreatをTrに指定する。
#共変量としてロジスティック回帰の予測値logi$fittedを用いている。
nsw1 <- Match(Y = lalonde$re78, Tr=lalonde$treat, X =logi$fitted)
summary(nsw1)
#マッチングのペアを確認する。
lalonde2 <- lalonde
lalonde2$id <- 1:nrow(lalonde2)
lalonde2$score <- logi$fitted
pair.df <- cbind(lalonde2[nsw1$index.treated, c("id","score")],
lalonde2[nsw1$index.control, c("id", "score")])
names(pair.df) <- c("t.id", "t.score", "c.id", "c.score")
head(pair.df)
#キャリパーマッチング（ペアが特定の距離以上になる時はマッチングしないマッチング）
nsw2 <- Match(Y =lalonde2$re78, Tr=lalonde2$treat, X =logi$fitted, caliper = T)
summary(nsw2)
View(lalonde)
View(nsw1)
Match
#サンプルデータを呼び出す
data(lalonde)
head(pair.df)
summary(nsw1)
library(tidyverse)
# マッチングに用いられたユニークなサンプルの確認
pair.df.treated <- pair.df %>%
dplyr::group_by(t.id) %>%
dplyr::summarise(count = n())
View(pair.df.treated)
ggplot(data = pair.df, aes(x = t.id)) +
geom_histogram()
ggplot(data = pair.df, aes(x = c.id)) +
geom_histogram()
# treated
ggplot(data = pair.df.treated, aes(x = count)) +
geom_histogram()
# control
pair.df.control <- pair.df %>%
dplyr::group_by(c.id) %>%
dplyr::summarise(count = n())
ggplot(data = pair.df.control, aes(x = count)) +
geom_histogram()
ggplot(data = pair.df, aes(x = t.id)) +
geom_histogram()
ggplot(data = pair.df, aes(x = c.id)) +
geom_histogram()
summary(pair.df.treated$count)
summary(pair.df.control$count)
head(pair.df)
