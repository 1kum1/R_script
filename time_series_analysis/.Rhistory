library(MASS)
head(housing)
sessionInfo()
class(housing$Sat)
# ordered logit model (proportional odds model)
house.logit <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
summary(house.logit, digits = 3)
data("housing")
# ordered logit model (proportional odds model)
house.logit <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
View(housing)
confint(house.logit)
predict(house.logit, housing, type = "p")
texreg::screenreg(house.logit)
predict(house.probit, housing, type = "class")
# ordered probit model
house.probit <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing, method = "probit")
summary(house.probit, digits = 3)
predict(house.probit, housing, type = "p")
predict(house.probit, housing, type = "class")
# macの場合
wine_dataset <- read.csv("/Users/ikumi/Dropbox/R_script/analytics/input/winequality-red.csv", sep = ";")
# [ワインデータに対し{MASS}で分析した場合 -------------------------------------------------
data <- wine_dataset
data$quality <- data$quality - 2
class(housing$Sat)
?class(housing$Sat)
class(data$quality)
data$quality <- as.factor(data$quality)
class(data$quality)
unique(data$quality)
unique(wine_dataset$quality)
# [ワインデータに対し{MASS}で分析した場合 -------------------------------------------------
data <- wine_dataset
data$quality <- data$quality - 2
data$quality <- ordered(data$quality, levels=c(1, 2, 3, 4, 5, 6))
class(data$quality)
View(data)
View(wine_dataset)
unique(data$quality)
data.scale <- data %>%
dplyr::select(-quality) %>%
scale()
library(tidyverse)
data.scale <- data %>%
dplyr::select(-quality) %>%
scale()
View(data.scale)
data.scale <- data %>%
dplyr::select(-quality) %>%
scale() %>%
data.frame()
data.scale$quality <- data$quality
# ordered logit model (proportional odds model)
wine.logit <- polr(quality ~ ., weights = Freq, data = data.scale)
View(housing)
# ordered logit model (proportional odds model)
wine.logit <- polr(quality ~ ., data = data.scale)
# wine.logit <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
summary(wine.logit, digits = 3)
confint(wine.logit)
getwd()
setwd("/Users/ikumi/Dropbox/R_script/github/time_series_analysis")
# 分析の対象となるデータ -----------------
# アメリカの個人消費・個人収入の増加率データ
usconsumption
# library -----------------------------------------------------------------
library(urca)
# 分析の対象となるデータ -----------------
# アメリカの個人消費・個人収入の増加率データ
usconsumption
library(vars)
install.packages("vars")
library(vars)
# 分析の対象となるデータ -----------------
# アメリカの個人消費・個人収入の増加率データ
usconsumption
library(fpp)
install.packages("fpp")
library(fpp)
# 分析の対象となるデータ -----------------
# アメリカの個人消費・個人収入の増加率データ
usconsumption
# 図示
autoplot(usconsumption, facets = T)
library(ggplot2)
# 図示
autoplot(usconsumption, facets = T)
# 単位根検定
# 消費の単位根検定
summary(ur.df(usconsumption[, "consumption"], type = "drift"))
# 収入の単位根検定
summary(ur.df(usconsumption[, "income"], type = "drift"))
# 相互相関係数
autoplot(
ccf(
usconsumption[, "consumption"],
usconsumption[, "income"],
plot = F
)
)
# RによるVARモデル -----------------
# 次数の選択
select_result <- VARselect(usconsumption, lag.max = 10, type="const")
select_result
select_result$selection[1]
# モデル化
var_bestorder <- VAR(
y = usconsumption,
type = "const",
p = select_result$selection[1]
)
summary(var_bestorder)
# VARモデルによる予測 -----------------
predict(var_bestorder, n.ahead = 4)
# 予測結果の図示
autoplot(
predict(var_bestorder, n.ahead = 8),
ts.colour = 1,
predict.colour = 1,
predict.linetype = 'dashed'
)
library(ggfortify)
# 予測結果の図示
autoplot(
predict(var_bestorder, n.ahead = 8),
ts.colour = 1,
predict.colour = 1,
predict.linetype = 'dashed'
)
# 予測結果の図示
# 8時点先までの予測結果
autoplot(
predict(var_bestorder, n.ahead = 8),
ts.colour = 1,
predict.colour = 1,
predict.linetype = 'dashed'
)
# 予測結果の図示
# 8時点先までの予測結果
autoplot(
predict(var_bestorder, n.ahead = 8),
#ts.colour = 1,
#predict.colour = 1,
predict.linetype = 'dashed'
)
# Grangerの因果性検定 -----------------
# 収入が消費に与える影響
causality(var_bestorder, cause = "income")
# 消費が収入に与える影響
causality(var_bestorder, cause = "consumption")
# インパルス応答関数 -----------------
# インパルス応答関数を求める
irf_consumption <- irf(
var_bestorder,
impulse = "consumption",
response = c("consumption", "income"),
n.ahead = 12,
boot = T
)
# インパルス応答関数の図示
plot(irf_consumption)
# 分散分解
# 相手のデータの影響をどれほど受けているかを調べる
plot(fevd(var_bestorder, n.ahead = 12))
